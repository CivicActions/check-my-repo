{
  "params": {
    "targetDir": "/var/folders/x6/yn1yfn3s1n52bj2cy7kg815w0000gn/T/repolinter-monocle-X4J37p",
    "filterPaths": [],
    "rulesetPath": "/Users/palomaoliveira/Documents/dev/automated-oss-quality-check/node_modules/repolinter/rulesets/default.json",
    "ruleset": {
      "$schema": "./schema.json",
      "version": 2,
      "axioms": {
        "linguist": "language",
        "licensee": "license",
        "packagers": "packager"
      },
      "rules": {
        "license-file-exists": {
          "level": "error",
          "rule": {
            "type": "file-existence",
            "options": {
              "globsAny": [
                "LICENSE*",
                "COPYING*"
              ],
              "nocase": true
            }
          }
        },
        "readme-file-exists": {
          "level": "error",
          "rule": {
            "type": "file-existence",
            "options": {
              "globsAny": [
                "README*"
              ],
              "nocase": true
            }
          }
        },
        "contributing-file-exists": {
          "level": "error",
          "rule": {
            "type": "file-existence",
            "options": {
              "globsAny": [
                "{docs/,.github/,}CONTRIB*"
              ],
              "nocase": true
            }
          }
        },
        "code-of-conduct-file-exists": {
          "level": "error",
          "rule": {
            "type": "file-existence",
            "options": {
              "globsAny": [
                "{docs/,.github/,}CODEOFCONDUCT*",
                "{docs/,.github/,}CODE-OF-CONDUCT*",
                "{docs/,.github/,}CODE_OF_CONDUCT*"
              ],
              "nocase": true
            }
          }
        },
        "changelog-file-exists": {
          "level": "error",
          "rule": {
            "type": "file-existence",
            "options": {
              "globsAny": [
                "CHANGELOG*"
              ],
              "nocase": true
            }
          }
        },
        "security-file-exists": {
          "level": "error",
          "rule": {
            "type": "file-existence",
            "options": {
              "globsAny": [
                "{docs/,.github/,}SECURITY.md"
              ]
            }
          }
        },
        "support-file-exists": {
          "level": "error",
          "rule": {
            "type": "file-existence",
            "options": {
              "globsAny": [
                "{docs/,.github/,}SUPPORT*"
              ],
              "nocase": true
            }
          }
        },
        "readme-references-license": {
          "level": "error",
          "rule": {
            "type": "file-contents",
            "options": {
              "globsAll": [
                "README*"
              ],
              "content": "license",
              "flags": "i"
            }
          }
        },
        "binaries-not-present": {
          "level": "error",
          "rule": {
            "type": "file-type-exclusion",
            "options": {
              "type": [
                "**/*.exe",
                "**/*.dll",
                "!node_modules/**"
              ]
            }
          }
        },
        "test-directory-exists": {
          "level": "error",
          "rule": {
            "type": "directory-existence",
            "options": {
              "globsAny": [
                "**/test*",
                "**/specs"
              ],
              "nocase": true
            }
          }
        },
        "integrates-with-ci": {
          "level": "error",
          "rule": {
            "type": "file-existence",
            "options": {
              "globsAny": [
                ".gitlab-ci.yml",
                ".travis.yml",
                "appveyor.yml",
                ".appveyor.yml",
                "circle.yml",
                ".circleci/config.yml",
                "Jenkinsfile",
                ".drone.yml",
                ".github/workflows/*",
                "azure-pipelines.yml"
              ]
            }
          }
        },
        "code-of-conduct-file-contains-email": {
          "level": "error",
          "rule": {
            "type": "file-contents",
            "options": {
              "globsAll": [
                "CODEOFCONDUCT*",
                "CODE-OF-CONDUCT*",
                "CODE_OF_CONDUCT*",
                ".github/CODEOFCONDUCT*",
                ".github/CODE-OF-CONDUCT*",
                ".github/CODE_OF_CONDUCT*"
              ],
              "content": ".+@.+\\..+",
              "flags": "i",
              "human-readable-content": "email address"
            }
          }
        },
        "source-license-headers-exist": {
          "level": "warning",
          "rule": {
            "type": "file-starts-with",
            "options": {
              "globsAll": [
                "**/*.js",
                "!node_modules/**"
              ],
              "lineCount": 5,
              "patterns": [
                "Copyright",
                "License"
              ],
              "flags": "i"
            }
          }
        },
        "github-issue-template-exists": {
          "level": "error",
          "rule": {
            "type": "file-existence",
            "options": {
              "globsAny": [
                "ISSUE_TEMPLATE*",
                ".github/ISSUE_TEMPLATE*"
              ]
            }
          }
        },
        "github-pull-request-template-exists": {
          "level": "error",
          "rule": {
            "type": "file-existence",
            "options": {
              "globsAny": [
                "PULL_REQUEST_TEMPLATE*",
                ".github/PULL_REQUEST_TEMPLATE*"
              ]
            }
          }
        },
        "javascript-package-metadata-exists": {
          "level": "error",
          "where": [
            "language=javascript"
          ],
          "rule": {
            "type": "file-existence",
            "options": {
              "globsAny": [
                "package.json"
              ]
            }
          }
        },
        "ruby-package-metadata-exists": {
          "level": "error",
          "where": [
            "language=ruby"
          ],
          "rule": {
            "type": "file-existence",
            "options": {
              "globsAny": [
                "Gemfile"
              ]
            }
          }
        },
        "java-package-metadata-exists": {
          "level": "error",
          "where": [
            "language=java"
          ],
          "rule": {
            "type": "file-existence",
            "options": {
              "globsAny": [
                "pom.xml",
                "build.xml",
                "build.gradle"
              ]
            }
          }
        },
        "python-package-metadata-exists": {
          "level": "error",
          "where": [
            "language=python"
          ],
          "rule": {
            "type": "file-existence",
            "options": {
              "globsAny": [
                "setup.py",
                "requirements.txt"
              ]
            }
          }
        },
        "objective-c-package-metadata-exists": {
          "level": "error",
          "where": [
            "language=objective-c"
          ],
          "rule": {
            "type": "file-existence",
            "options": {
              "globsAny": [
                "Cartfile",
                "Podfile",
                "*.podspec"
              ]
            }
          }
        },
        "swift-package-metadata-exists": {
          "level": "error",
          "where": [
            "language=swift"
          ],
          "rule": {
            "type": "file-existence",
            "options": {
              "globsAny": [
                "Package.swift"
              ]
            }
          }
        },
        "erlang-package-metadata-exists": {
          "level": "error",
          "where": [
            "language=erlang"
          ],
          "rule": {
            "type": "file-existence",
            "options": {
              "globsAny": [
                "rebar.config"
              ]
            }
          }
        },
        "elixir-package-metadata-exists": {
          "level": "error",
          "where": [
            "language=elixir"
          ],
          "rule": {
            "type": "file-existence",
            "options": {
              "globsAny": [
                "mix.exs"
              ]
            }
          }
        },
        "license-detectable-by-licensee": {
          "level": "off",
          "where": [
            "license=*"
          ],
          "rule": {
            "type": "license-detectable-by-licensee",
            "options": {}
          }
        },
        "notice-file-exists": {
          "level": "error",
          "where": [
            "license=Apache-2.0"
          ],
          "rule": {
            "type": "file-existence",
            "options": {
              "globsAny": [
                "NOTICE*"
              ],
              "fail-message": "The NOTICE file is described in section 4.4 of the Apache License version 2.0. Its presence is not mandated by the license itself, but by ASF policy."
            }
          }
        }
      }
    }
  },
  "passed": false,
  "errored": false,
  "results": [
    {
      "ruleInfo": {
        "name": "license-file-exists",
        "level": "error",
        "where": [],
        "ruleType": "file-existence",
        "ruleConfig": {
          "globsAny": [
            "LICENSE*",
            "COPYING*"
          ],
          "nocase": true
        }
      },
      "status": "PASSED",
      "lintResult": {
        "targets": [
          {
            "passed": true,
            "path": "LICENSE",
            "message": "Found file"
          }
        ],
        "passed": true
      }
    },
    {
      "ruleInfo": {
        "name": "readme-file-exists",
        "level": "error",
        "where": [],
        "ruleType": "file-existence",
        "ruleConfig": {
          "globsAny": [
            "README*"
          ],
          "nocase": true
        }
      },
      "status": "PASSED",
      "lintResult": {
        "targets": [
          {
            "passed": true,
            "path": "README.md",
            "message": "Found file"
          }
        ],
        "passed": true
      }
    },
    {
      "ruleInfo": {
        "name": "contributing-file-exists",
        "level": "error",
        "where": [],
        "ruleType": "file-existence",
        "ruleConfig": {
          "globsAny": [
            "{docs/,.github/,}CONTRIB*"
          ],
          "nocase": true
        }
      },
      "status": "PASSED",
      "lintResult": {
        "targets": [
          {
            "passed": true,
            "path": "CONTRIBUTING.md",
            "message": "Found file"
          }
        ],
        "passed": true
      }
    },
    {
      "ruleInfo": {
        "name": "code-of-conduct-file-exists",
        "level": "error",
        "where": [],
        "ruleType": "file-existence",
        "ruleConfig": {
          "globsAny": [
            "{docs/,.github/,}CODEOFCONDUCT*",
            "{docs/,.github/,}CODE-OF-CONDUCT*",
            "{docs/,.github/,}CODE_OF_CONDUCT*"
          ],
          "nocase": true
        }
      },
      "status": "NOT_PASSED_ERROR",
      "lintResult": {
        "message": "Did not find a file matching the specified patterns",
        "targets": [
          {
            "passed": false,
            "pattern": "{docs/,.github/,}CODEOFCONDUCT*"
          },
          {
            "passed": false,
            "pattern": "{docs/,.github/,}CODE-OF-CONDUCT*"
          },
          {
            "passed": false,
            "pattern": "{docs/,.github/,}CODE_OF_CONDUCT*"
          }
        ],
        "passed": false
      }
    },
    {
      "ruleInfo": {
        "name": "changelog-file-exists",
        "level": "error",
        "where": [],
        "ruleType": "file-existence",
        "ruleConfig": {
          "globsAny": [
            "CHANGELOG*"
          ],
          "nocase": true
        }
      },
      "status": "NOT_PASSED_ERROR",
      "lintResult": {
        "message": "Did not find a file matching the specified patterns",
        "targets": [
          {
            "passed": false,
            "pattern": "CHANGELOG*"
          }
        ],
        "passed": false
      }
    },
    {
      "ruleInfo": {
        "name": "security-file-exists",
        "level": "error",
        "where": [],
        "ruleType": "file-existence",
        "ruleConfig": {
          "globsAny": [
            "{docs/,.github/,}SECURITY.md"
          ]
        }
      },
      "status": "NOT_PASSED_ERROR",
      "lintResult": {
        "message": "Did not find a file matching the specified patterns",
        "targets": [
          {
            "passed": false,
            "pattern": "{docs/,.github/,}SECURITY.md"
          }
        ],
        "passed": false
      }
    },
    {
      "ruleInfo": {
        "name": "support-file-exists",
        "level": "error",
        "where": [],
        "ruleType": "file-existence",
        "ruleConfig": {
          "globsAny": [
            "{docs/,.github/,}SUPPORT*"
          ],
          "nocase": true
        }
      },
      "status": "NOT_PASSED_ERROR",
      "lintResult": {
        "message": "Did not find a file matching the specified patterns",
        "targets": [
          {
            "passed": false,
            "pattern": "{docs/,.github/,}SUPPORT*"
          }
        ],
        "passed": false
      }
    },
    {
      "ruleInfo": {
        "name": "readme-references-license",
        "level": "error",
        "where": [],
        "ruleType": "file-contents",
        "ruleConfig": {
          "globsAll": [
            "README*"
          ],
          "content": "license",
          "flags": "i"
        }
      },
      "status": "NOT_PASSED_ERROR",
      "lintResult": {
        "targets": [
          {
            "passed": false,
            "path": "README.md",
            "message": "Doesn't contain license"
          }
        ],
        "passed": false
      }
    },
    {
      "ruleInfo": {
        "name": "binaries-not-present",
        "level": "error",
        "where": [],
        "ruleType": "file-type-exclusion",
        "ruleConfig": {
          "type": [
            "**/*.exe",
            "**/*.dll",
            "!node_modules/**"
          ]
        }
      },
      "status": "PASSED",
      "lintResult": {
        "message": "Excluded file type doesn't exist",
        "targets": [
          {
            "passed": true,
            "pattern": [
              "**/*.exe",
              "**/*.dll",
              "!node_modules/**"
            ]
          }
        ],
        "passed": true
      }
    },
    {
      "ruleInfo": {
        "name": "test-directory-exists",
        "level": "error",
        "where": [],
        "ruleType": "directory-existence",
        "ruleConfig": {
          "globsAny": [
            "**/test*",
            "**/specs"
          ],
          "nocase": true
        }
      },
      "status": "PASSED",
      "lintResult": {
        "targets": [
          {
            "passed": true,
            "path": "tests",
            "message": "Found file"
          }
        ],
        "passed": true
      }
    },
    {
      "ruleInfo": {
        "name": "integrates-with-ci",
        "level": "error",
        "where": [],
        "ruleType": "file-existence",
        "ruleConfig": {
          "globsAny": [
            ".gitlab-ci.yml",
            ".travis.yml",
            "appveyor.yml",
            ".appveyor.yml",
            "circle.yml",
            ".circleci/config.yml",
            "Jenkinsfile",
            ".drone.yml",
            ".github/workflows/*",
            "azure-pipelines.yml"
          ]
        }
      },
      "status": "PASSED",
      "lintResult": {
        "targets": [
          {
            "passed": true,
            "path": ".travis.yml",
            "message": "Found file"
          }
        ],
        "passed": true
      }
    },
    {
      "ruleInfo": {
        "name": "code-of-conduct-file-contains-email",
        "level": "error",
        "where": [],
        "ruleType": "file-contents",
        "ruleConfig": {
          "globsAll": [
            "CODEOFCONDUCT*",
            "CODE-OF-CONDUCT*",
            "CODE_OF_CONDUCT*",
            ".github/CODEOFCONDUCT*",
            ".github/CODE-OF-CONDUCT*",
            ".github/CODE_OF_CONDUCT*"
          ],
          "content": ".+@.+\\..+",
          "flags": "i",
          "human-readable-content": "email address"
        }
      },
      "status": "PASSED",
      "lintResult": {
        "message": "Did not find file matching the specified patterns",
        "targets": [
          {
            "passed": false,
            "pattern": "CODEOFCONDUCT*"
          },
          {
            "passed": false,
            "pattern": "CODE-OF-CONDUCT*"
          },
          {
            "passed": false,
            "pattern": "CODE_OF_CONDUCT*"
          },
          {
            "passed": false,
            "pattern": ".github/CODEOFCONDUCT*"
          },
          {
            "passed": false,
            "pattern": ".github/CODE-OF-CONDUCT*"
          },
          {
            "passed": false,
            "pattern": ".github/CODE_OF_CONDUCT*"
          }
        ],
        "passed": true
      }
    },
    {
      "ruleInfo": {
        "name": "source-license-headers-exist",
        "level": "warning",
        "where": [],
        "ruleType": "file-starts-with",
        "ruleConfig": {
          "globsAll": [
            "**/*.js",
            "!node_modules/**"
          ],
          "lineCount": 5,
          "patterns": [
            "Copyright",
            "License"
          ],
          "flags": "i"
        }
      },
      "status": "NOT_PASSED_WARN",
      "lintResult": {
        "message": "Did not find file matching the specified patterns",
        "targets": [
          {
            "passed": false,
            "pattern": "**/*.js"
          },
          {
            "passed": false,
            "pattern": "!node_modules/**"
          }
        ],
        "passed": false
      }
    },
    {
      "ruleInfo": {
        "name": "github-issue-template-exists",
        "level": "error",
        "where": [],
        "ruleType": "file-existence",
        "ruleConfig": {
          "globsAny": [
            "ISSUE_TEMPLATE*",
            ".github/ISSUE_TEMPLATE*"
          ]
        }
      },
      "status": "NOT_PASSED_ERROR",
      "lintResult": {
        "message": "Did not find a file matching the specified patterns",
        "targets": [
          {
            "passed": false,
            "pattern": "ISSUE_TEMPLATE*"
          },
          {
            "passed": false,
            "pattern": ".github/ISSUE_TEMPLATE*"
          }
        ],
        "passed": false
      }
    },
    {
      "ruleInfo": {
        "name": "github-pull-request-template-exists",
        "level": "error",
        "where": [],
        "ruleType": "file-existence",
        "ruleConfig": {
          "globsAny": [
            "PULL_REQUEST_TEMPLATE*",
            ".github/PULL_REQUEST_TEMPLATE*"
          ]
        }
      },
      "status": "NOT_PASSED_ERROR",
      "lintResult": {
        "message": "Did not find a file matching the specified patterns",
        "targets": [
          {
            "passed": false,
            "pattern": "PULL_REQUEST_TEMPLATE*"
          },
          {
            "passed": false,
            "pattern": ".github/PULL_REQUEST_TEMPLATE*"
          }
        ],
        "passed": false
      }
    },
    {
      "ruleInfo": {
        "name": "javascript-package-metadata-exists",
        "level": "error",
        "where": [
          "language=javascript"
        ],
        "ruleType": "file-existence",
        "ruleConfig": {
          "globsAny": [
            "package.json"
          ]
        }
      },
      "runMessage": "ignored due to unsatisfied condition(s): \"language=javascript\"",
      "status": "IGNORED"
    },
    {
      "ruleInfo": {
        "name": "ruby-package-metadata-exists",
        "level": "error",
        "where": [
          "language=ruby"
        ],
        "ruleType": "file-existence",
        "ruleConfig": {
          "globsAny": [
            "Gemfile"
          ]
        }
      },
      "runMessage": "ignored due to unsatisfied condition(s): \"language=ruby\"",
      "status": "IGNORED"
    },
    {
      "ruleInfo": {
        "name": "java-package-metadata-exists",
        "level": "error",
        "where": [
          "language=java"
        ],
        "ruleType": "file-existence",
        "ruleConfig": {
          "globsAny": [
            "pom.xml",
            "build.xml",
            "build.gradle"
          ]
        }
      },
      "runMessage": "ignored due to unsatisfied condition(s): \"language=java\"",
      "status": "IGNORED"
    },
    {
      "ruleInfo": {
        "name": "python-package-metadata-exists",
        "level": "error",
        "where": [
          "language=python"
        ],
        "ruleType": "file-existence",
        "ruleConfig": {
          "globsAny": [
            "setup.py",
            "requirements.txt"
          ]
        }
      },
      "runMessage": "ignored due to unsatisfied condition(s): \"language=python\"",
      "status": "IGNORED"
    },
    {
      "ruleInfo": {
        "name": "objective-c-package-metadata-exists",
        "level": "error",
        "where": [
          "language=objective-c"
        ],
        "ruleType": "file-existence",
        "ruleConfig": {
          "globsAny": [
            "Cartfile",
            "Podfile",
            "*.podspec"
          ]
        }
      },
      "runMessage": "ignored due to unsatisfied condition(s): \"language=objective-c\"",
      "status": "IGNORED"
    },
    {
      "ruleInfo": {
        "name": "swift-package-metadata-exists",
        "level": "error",
        "where": [
          "language=swift"
        ],
        "ruleType": "file-existence",
        "ruleConfig": {
          "globsAny": [
            "Package.swift"
          ]
        }
      },
      "runMessage": "ignored due to unsatisfied condition(s): \"language=swift\"",
      "status": "IGNORED"
    },
    {
      "ruleInfo": {
        "name": "erlang-package-metadata-exists",
        "level": "error",
        "where": [
          "language=erlang"
        ],
        "ruleType": "file-existence",
        "ruleConfig": {
          "globsAny": [
            "rebar.config"
          ]
        }
      },
      "runMessage": "ignored due to unsatisfied condition(s): \"language=erlang\"",
      "status": "IGNORED"
    },
    {
      "ruleInfo": {
        "name": "elixir-package-metadata-exists",
        "level": "error",
        "where": [
          "language=elixir"
        ],
        "ruleType": "file-existence",
        "ruleConfig": {
          "globsAny": [
            "mix.exs"
          ]
        }
      },
      "runMessage": "ignored due to unsatisfied condition(s): \"language=elixir\"",
      "status": "IGNORED"
    },
    {
      "ruleInfo": {
        "name": "license-detectable-by-licensee",
        "level": "off",
        "where": [
          "license=*"
        ],
        "ruleType": "license-detectable-by-licensee",
        "ruleConfig": {}
      },
      "runMessage": "ignored because level is \"off\"",
      "status": "IGNORED"
    },
    {
      "ruleInfo": {
        "name": "notice-file-exists",
        "level": "error",
        "where": [
          "license=Apache-2.0"
        ],
        "ruleType": "file-existence",
        "ruleConfig": {
          "globsAny": [
            "NOTICE*"
          ],
          "fail-message": "The NOTICE file is described in section 4.4 of the Apache License version 2.0. Its presence is not mandated by the license itself, but by ASF policy."
        }
      },
      "runMessage": "ignored due to unsatisfied condition(s): \"license=Apache-2.0\"",
      "status": "IGNORED"
    }
  ],
  "targets": {
    "language": {
      "message": "Linguist not installed",
      "targets": [],
      "passed": false
    },
    "license": {
      "message": "Licensee not installed",
      "targets": [],
      "passed": false
    },
    "packager": {
      "targets": [
        {
          "passed": true,
          "path": "pypi"
        }
      ],
      "passed": true
    }
  }
}